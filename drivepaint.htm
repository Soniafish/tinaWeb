<html>
<head>
<title>Canvas</title>
<script type="text/javascript">
var cvs, ctx, svg;
window.onload=function(){
	// 初始化程式，取得重要的全域物件
	cvs=document.getElementById("cvs");
	ctx=cvs.getContext("2d");
	svg=document.getElementById("svg");
	svg.style.left=cvs.offsetLeft+"px";
	svg.style.top=cvs.offsetTop+"px";
	// 由於 svg 覆蓋在 canvas 之上，事件必須由此觸發
	svg.addEventListener("mousedown", mousedownSvg);
};
function mousedownSvg(e){
	var startX=e.clientX-cvs.offsetLeft;
	var startY=e.clientY-cvs.offsetTop;
	// 取得顏色
	var fillColor=document.getElementById("fill-color").value;
	// 建立 svg 中的方形元件，用來做操作時的預覽
	var rect=document.createElementNS(
		"http://www.w3.org/2000/svg",
		"rect"
	);
	rect.setAttribute("fill", fillColor);
	svg.appendChild(rect);
	var move=function(e){
		var endX=e.clientX-cvs.offsetLeft;
		var endY=e.clientY-cvs.offsetTop;
		// 為了讓使用者可以往各個方向拉動，都能建立方型，所做的計算
		var width=Math.abs(endX-startX);
		var x=endX>startX?startX:endX;
		var height=Math.abs(endY-startY);
		var y=endY>startY?startY:endY;
		// 更新 svg 中的方形原件
		rect.setAttribute("x", x);
		rect.setAttribute("y", y);
		rect.setAttribute("width", width);
		rect.setAttribute("height", height);
	};
	var end=function(e){
		var endX=e.clientX-cvs.offsetLeft;
		var endY=e.clientY-cvs.offsetTop;
		// 為了讓使用者可以往各個方向拉動，都能建立方型，所做的計算
		var width=Math.abs(endX-startX);
		var x=endX>startX?startX:endX;
		var height=Math.abs(endY-startY);
		var y=endY>startY?startY:endY;
		// 正式將圖形話到 canvas 上面
		ctx.fillStyle=fillColor;
		ctx.fillRect(x, y, width, height);
		// 移除 svg 中的方形元件
		svg.removeChild(rect);
		// 移除事件處理器
		document.removeEventListener("mousemove", move);
		document.removeEventListener("mouseup", end);
	};
	document.addEventListener("mousemove", move);
	document.addEventListener("mouseup", end);
}
// Filter
function grayscale(){
	var pixels=ctx.getImageData(0, 0, cvs.width, cvs.height);
	var data=pixels.data;
	var r, g, b, a;
	var value;
	for(var i=0;i<data.length;i+=4){
		r=data[i];
		g=data[i+1];
		b=data[i+2];
		a=data[i+3];
		value=(r+g+b)/3;
		data[i]=data[i+1]=data[i+2]=value;
	}
	ctx.putImageData(pixels, 0, 0);
}
// File management
function loadFile(input){
	var file=input.files[0];
	var url=URL.createObjectURL(file);
	var img=new Image();
	img.src=url;
	img.onload=function(){
		cvs.width=this.width;
		cvs.height=this.height;
		svg.setAttribute("width", this.width);
		svg.setAttribute("height", this.height);
		ctx.drawImage(this, 0, 0);
	};
}
function openFile(){
	var fileInput=document.getElementById("file-input");
	fileInput.click();
}
function saveFile(){
	var url=cvs.toDataURL("image/jpeg");
	var link=document.getElementById("file-save");
	link.href=url;
	link.download="image.jpg";
	link.click();
};
//Google Drive
//4.copy "quickstart.html"的CLIENT_ID與SCOPES,SCOPES的網址內容改為/drive
var CLIENT_ID='8697117080-nauok37nvtqt4k5h8up1eud9ghpmc4ad.apps.googleusercontent.com';
var SCOPES = ['https://www.googleapis.com/auth/drive'];
function initGoogle(){
	gapi.load('picker');//2-2.
	//3.偵測用戶授權狀態, 建立function initGoogle(){}, copy "quickstart.html"的gapi.auth.authorize(..)為函式內容
	 gapi.auth.authorize(
          {
            'client_id': CLIENT_ID,
            // 'scope'即上面的授權範圍網址
            'scope': SCOPES.join(' '),
            //立即授權
            'immediate': true
          }, handleAuthResult);
}

//5.宣告token變數, copy "quickstart.html"的handleAuthResult(authResult)並修改
var token= null;
function handleAuthResult(authResult) {
		// console.log(authResult);
        if (authResult && !authResult.error) {//已授權
         token= authResult.access_token;
        } else {//未授權
          token= null;
        }
      }
//6.copy "quickstart.html"的function authorize () {}
function authorize () {
	gapi.auth.authorize({
		'client_id': CLIENT_ID,
		'scope': SCOPES.join(' '),
		 'immediate': false
	},handleAuthResult);
}
//7.針對未授權者跳出授權畫面
function openFileFromDrive(){
	//讀取檔案
	if(token==null){//未授權,立即請使用者授權
		authorize();
		return;
	}

	/*Google Drive Rest API 呼叫
	var req= new XMLHttpRequest();
	req.open("get", "https://www.googleapis.com/drive/v3/files");
	//"Authorization", "Bearer "+token"為規定用法,"Bearer "需空一格
	req.setRequestHeader("Authorization", "Bearer "+token);
	req.onload= function (){
		// console.log(this.responseText); //取得檔案列表100個
		var data= JSON.parse(this.responseText);//將JSON資料轉為物件
		console.log(data);
	};
	req.send();
	*/
	createPicker();//2-3.開啟檔案選擇器
}

//2-4.開啟檔案選擇器
	function createPicker() {
        var picker = new google.picker.PickerBuilder().
            addView(google.picker.ViewId.PHOTOS).
            addView(google.picker.ViewId.DOCS_IMAGES).//從Showing Different Views套用
            setOAuthToken(token).
            setDeveloperKey("AIzaSyCt-9PGDZkbEVELdXZhGhs1QfLHQKqUYDk").
            setCallback(pickerCallback).
            build();
        picker.setVisible(true);
    }
 //2-5.pickerCallback
 	function pickerCallback(data) {
 		console.log(data);
      if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {//使用者的動作為選取
        var doc = data[google.picker.Response.DOCUMENTS][0];
        url = doc[google.picker.Document.URL];
        alert(doc.id);
      }
    }

</script>
<!-- 2-1.引入picker用的API -->
<script src="https://apis.google.com/js/api.js"></script>
 <!--2. google的套件載入 onload=initGoogle(即你要呼叫的函式)-->
    <script src="https://apis.google.com/js/client.js?onload=initGoogle">
    </script>
</head>
<body>
<button onclick="openFile();">Open</button>
<button onclick="saveFile();">Save</button>
<a id="file-save" style="display:none;">Download</a>
<input id="file-input" type="file" onchange="loadFile(this);" style="display:none" />
<input type="color" id="fill-color" />
<button onclick="grayscale();">Grayscale</button>
<!-- 1.新建一個按鈕 -->
<button onclick="openFileFromDrive();">Open from Google Drive</button>
<hr/>
<canvas style="border:1px solid black"
	width="800" height="600" id="cvs"></canvas>
<svg id="svg" width="800" height="600"
	style="position:absolute;border:1px solid black"></svg>
</body>
</html>





